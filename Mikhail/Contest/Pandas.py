'''Вам дан DataFrame, который можно считать из файла: либо стандартным методом чтения из файла, как и в случае с NumPy массивами, так и с использование методов Pandas (если уже кто-то знает нужные методы).

У DataFrame нет названия колонок и индексов строк (т.е. при чтении они определяться автоматически системными индексами).

Вам необходимо проверить размерность DataFrame и вывести две строки:

Количество строк
Количество столбцов'''

import pandas as pd

df = pd.read_csv("input.csv", header=None)
print(df.shape[0])
print(df.shape[1])

'''Вам дан некоторый набор данных в виде DataFrame, который можно считать из файла: либо стандартным методом чтения из файла, как и в случае с NumPy массивами, так и с использование методов Pandas (если уже кто-то знает нужные методы)

Данные содержат следующий набор колонок:

Имя (str)
Возраст (int)
Балл (int)
Вам необходимо найти имя, которое встречается чаще всего в данном наборе данных и вывести имя и сколько раз оно встречается в одной строке (разделитель - пробел).

Если таких имён несколько, вывести каждое имя и соответствующее ему количество на отдельных строках в алфавитном порядке.'''

import pandas as pd

df = pd.read_csv('input.csv')
res = df['Имя'].value_counts()[lambda x: x == df['Имя'].value_counts().max()].sort_index()
for i in range(res.shape[0]): print(f"{res.index[i]} {res.values[i]}")

'''Вам дан некоторый набор данных в виде DataFrame, который можно считать из файла: либо стандартным методом чтения из файла, как и в случае с NumPy массивами, так и с использование методов Pandas (если уже кто-то знает нужные методы)

Данные содержат следующий набор колонок:

Имя (str)
Возраст (int)
Балл (int)
Вам необходимо найти все различные имена в данных и вывести их в одну строку через проблем в лексиграфическом порядке.'''

import pandas as pd

df = pd.read_csv('input.csv')
print(" ".join(i for i in df['Имя'].sort_values().unique()))

'''Вам дан некоторый набор данных в виде DataFrame, который можно считать из файла: либо стандартным методом чтения из файла, как и в случае с NumPy массивами, так и с использование методов Pandas (если уже кто-то знает нужные методы)

Данные содержат следующий набор колонок:

Имя (str)
Возраст (int)
Балл (int)
В некоторых колонках содержаться пропуски (NaN). Посчитайте сколько пропусков в каждом столбце.'''

import pandas as pd

df = pd.read_csv('input.csv')
res = df.isna().sum()
print("Название_колонки,Количество_NaN")
for i in range(res.shape[0]): print(f"{res.index[i]},{res.values[i]}")

'''Вам дан некоторый набор данных в виде DataFrame, который можно считать из файла: либо стандартным методом чтения из файла, как и в случае с NumPy массивами, так и с использование методов Pandas (если уже кто-то знает нужные методы)

Данные содержат следующий набор колонок:

Имя (str)
Возраст (int)
Балл (int)
Найдите всех людей старшей 35 лет (не включая 35). Выведите их имена через пробел в одну строку в порядке нахождения в датасете.'''

import pandas as pd

df = pd.read_csv('input.csv')
res = df["Возраст"].apply(lambda x: x > 35)
print(" ".join(i for i in df['Имя'][res]))

'''Данный датасет основывается на данных, собранные о настольных играх с веб-сайта BoardGameGeek (BGG) в феврале 2021 года. BGG — это крупнейшая онлайн-коллекция данных о настольных играх, которая состоит из данных о более чем 100 000 игр (с рейтингом и без рейтинга).

Columns
ID - Идентификатор настольной игры
Name - Имя
Year Published - Год публикации
Rating Average - Средний рейтинг, полученный игрой (целевая переменная)
Complexity Average - Среднее значение сложности игры
Domains - Домены настольных игр, которым принадлежит игра (тематика)
Найдите ответы на вопросы:

Какая тематика представлена наиболее часто (только название игры)?
Сколько игр относятся к данной тематике (одно число типа int)?
Если таких тематик несколько, выведете ответ для каждой в новой строке.'''

import pandas as pd

df = pd.read_csv('input.csv')
df = df["Domains"].str.split(',', expand=True).stack()
df = df.reset_index(drop=True)
value_counts = df.value_counts()
maximum = value_counts.max()
ans = value_counts[value_counts == maximum]
for genre, count in ans.items():
    print(f"{genre.strip()} {count}")


'''Данный датасет основывается на данных, собранные о настольных играх с веб-сайта BoardGameGeek (BGG) в феврале 2021 года. BGG — это крупнейшая онлайн-коллекция данных о настольных играх, которая состоит из данных о более чем 100 000 игр (с рейтингом и без рейтинга).

Columns
ID - Идентификатор настольной игры
Name - Имя
Year Published - Год публикации
Rating Average - Средний рейтинг, полученный игрой (целевая переменная)
Complexity Average - Среднее значение сложности игры
Domains - Домены настольных игр, которым принадлежит игра (тематика)
Какой средний возраст игр? Округлите ответ до 2-х знаков после запятой.

Точкой отсчета возьмем 2021 год.'''

import pandas as pd

df = pd.read_csv('input.csv')
years = 2021 - df["Year Published"].mean()
print(round(years, 2))

'''Данный датасет основывается на данных, собранные о настольных играх с веб-сайта BoardGameGeek (BGG) в феврале 2021 года. BGG — это крупнейшая онлайн-коллекция данных о настольных играх, которая состоит из данных о более чем 100 000 игр (с рейтингом и без рейтинга).

Columns
ID - Идентификатор настольной игры
Name - Имя
Year Published - Год публикации
Rating Average - Средний рейтинг, полученный игрой (целевая переменная)
Complexity Average - Среднее значение сложности игры
Domains - Домены настольных игр, которым принадлежит игра (тематика)
Посчитайте средний рейтинг всех игр, которые относятся к стратегиям. Ответ округлите до 2-х знаков после запятой.'''

import pandas as pd

df = pd.read_csv('input.csv')
df = df[df["Domains"].apply(lambda x:  True if "Strategy Games" in x else False)]
rait = df["Rating Average"].str.replace(",", ".").astype(float).mean()
print(round(rait, 2))


'''Набор данные содержит сведения о характеристиках различных устройств и их цены в зависимости от этих характеристик.

Columns
laptop_ID- ID устройства
Company- Компания-производитель
Inches- Размер экрана в дюймах
ScreenResolution- Разрешение экрана
Cpu- CPU
Ram- RAM
Weight- Вес
Рассчитайте среднее значение PPI (Плотность пикселей на дюйм).

PPI (Pixels Per Inch) - пиксели на дюйм. Данный показатель является отношением диагонального разрешения в пикселях к размеру диагонали в дюймах.'''

import pandas as pd

df = pd.read_csv('input.csv')
Inches = df["Inches"]
ScreenResolution = df["ScreenResolution"].apply(lambda x: str(x).split()[-1]).apply(lambda y: (int(y.split("x")[0])**2 + int(y.split("x")[1])**2)**0.5)
PPI = ScreenResolution / Inches
print(round(PPI.mean(), 2))